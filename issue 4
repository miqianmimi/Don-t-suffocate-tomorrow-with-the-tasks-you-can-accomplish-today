def quicksort(A, p, r):
    if p < r:
        q = partition(A, p, r)
        quicksort( A, p, q - 1)
        quicksort( A, q + 1, r)


def partition(A, p, r):
    x = A[r-1]
    i = p - 1
    for j in range(p, r):
        if A[j - 1] <= x:
            i = i + 1
            B = A[i - 1]
            A[i - 1] = A[j - 1]
            A[j - 1] = B
    C = A[i]
    A[i] = A[r - 1]
    A[r - 1] = C
    return (i + 1)

class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        num=[]
        for i in nums1:
            num.append(i)
        for j in nums2:
            num.append(j)
        print num
        quicksort(num,1,len(num))
        print num
        if len(num)%2==0:
            a=(num[len(num)/2-1]+num[len(num)/2])*0.5
            return a
        if len(num)%2==1:
            return num[(len(num)-1)/2]



#experiment#
t=Solution()
c=t.findMedianSortedArrays([1,2],[3,4])
print c
